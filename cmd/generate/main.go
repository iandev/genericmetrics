package main

import (
	"html/template"
	"log"
	"os"
	"reflect"
	"strings"
	"time"

	"github.com/iandev/genericmetrics/metrics"
)

var prometheusTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
package metrics

import "github.com/prometheus/client_golang/prometheus"

{{- range .Funcs }}

// Inc calls the prometheus Inc function using {{ .MetricName }} for tags
func (m {{ .MetricName }}) Inc() {
	labels := []string{
	{{- range .Labels }}
		"{{ printf "%s" .}}",
	{{- end }}
	}
	opts := prometheus.CounterOpts{Name: "{{ .MetricName }}", Help: "{{ .Help }}"}
	prometheus.NewCounterVec(opts, labels).WithLabelValues(
	{{- range .Labels }}
		m.{{ printf "%s" .}},
	{{- end }}
	).Inc()
}

// Desc returns the prometheus Counter Desc
func (m {{ .MetricName }}) Desc() *prometheus.Desc {
	labels := []string{
	{{- range .Labels }}
		"{{ printf "%s" .}}",
	{{- end }}
	}
	opts := prometheus.CounterOpts{Name: "{{ .MetricName }}", Help: "{{ .Help }}"}
	return prometheus.NewCounterVec(opts, labels).WithLabelValues(
	{{- range .Labels }}
		m.{{ printf "%s" .}},
	{{- end }}
	).Desc()
}
{{- end }}
`))

type MetricFuncs struct {
	MetricName string
	Labels     []string
	Help       string
}

func main() {
	funcs := []MetricFuncs{}

	m := reflect.TypeOf(metrics.MetricTypes{})
	for i := 0; i < m.NumField(); i++ {
		varType := m.Field(i).Type
		metricName := varType.Name()

		labels := make([]string, varType.NumField())

		for j := 0; j < varType.NumField(); j++ {
			labels[j] = varType.Field(j).Name
		}

		fun := MetricFuncs{
			MetricName: metricName,
			Labels:     labels,
		}

		tag := m.Field(i).Tag.Get("prometheus")
		help := strings.Split(tag, "=")
		if len(help) > 1 {
			fun.Help = help[1]
		}

		funcs = append(funcs, fun)
	}

	out, err := os.Create("funcs.go")
	if err != nil {
		log.Fatalf("Cannot create funcs.go file")
	}
	defer out.Close()

	prometheusTemplate.Execute(out, struct {
		Timestamp time.Time
		Funcs     []MetricFuncs
	}{
		Timestamp: time.Now(),
		Funcs:     funcs,
	})
}
