// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2018-06-16 18:29:25.690406846 -0400 EDT m=&#43;0.002062135
package metrics

import "github.com/prometheus/client_golang/prometheus"

type BarBazBingCounter struct {
	BarBazBing *BarBazBing
	c prometheus.Counter
}
// NewBarBazBing returns an instance of a BarBazBingCounter and registers the counter with prometheus
func NewBarBazBingCounter(m *BarBazBing) BarBazBingCounter {
	labels := []string{
		"Bar",
		"Baz",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBazBing", Help: "HELPME"}
	counter := prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Baz,
		m.Bing,
	)
	prometheus.MustRegister(counter)
	return BarBazBingCounter{
		BarBazBing: m,
		c: counter,
	}
}
// Inc is a wrapper around the prometheus Inc() method
func (m BarBazBingCounter) Inc() {
	m.c.Inc()
}


type BazCounter struct {
	Baz *Baz
	c prometheus.Counter
}
// NewBaz returns an instance of a BazCounter and registers the counter with prometheus
func NewBazCounter(m *Baz) BazCounter {
	labels := []string{
		"Baz",
	}
	opts := prometheus.CounterOpts{Name: "Baz", Help: "Baz HELP"}
	counter := prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Baz,
	)
	prometheus.MustRegister(counter)
	return BazCounter{
		Baz: m,
		c: counter,
	}
}
// Inc is a wrapper around the prometheus Inc() method
func (m BazCounter) Inc() {
	m.c.Inc()
}


type BazBarCounter struct {
	BazBar *BazBar
	c prometheus.Counter
}
// NewBazBar returns an instance of a BazBarCounter and registers the counter with prometheus
func NewBazBarCounter(m *BazBar) BazBarCounter {
	labels := []string{
		"Baz",
		"Bar",
	}
	opts := prometheus.CounterOpts{Name: "BazBar", Help: "BazBar HELP"}
	counter := prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Baz,
		m.Bar,
	)
	prometheus.MustRegister(counter)
	return BazBarCounter{
		BazBar: m,
		c: counter,
	}
}
// Inc is a wrapper around the prometheus Inc() method
func (m BazBarCounter) Inc() {
	m.c.Inc()
}


type BarBingCounter struct {
	BarBing *BarBing
	c prometheus.Counter
}
// NewBarBing returns an instance of a BarBingCounter and registers the counter with prometheus
func NewBarBingCounter(m *BarBing) BarBingCounter {
	labels := []string{
		"Bar",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBing", Help: "BarBing HELP"}
	counter := prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Bing,
	)
	prometheus.MustRegister(counter)
	return BarBingCounter{
		BarBing: m,
		c: counter,
	}
}
// Inc is a wrapper around the prometheus Inc() method
func (m BarBingCounter) Inc() {
	m.c.Inc()
}

