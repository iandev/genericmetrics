// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2018-06-16 14:48:51.754831363 -0400 EDT m=&#43;0.002169899
package metrics

import "github.com/prometheus/client_golang/prometheus"

// Inc calls the prometheus Inc function using BarBazBing for tags
func (m BarBazBing) Inc() {
	labels := []string{
		"Bar",
		"Baz",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBazBing", Help: "HELPME"}
	prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Baz,
		m.Bing,
	).Inc()
}



// Desc returns the prometheus Counter Desc
func (m BarBazBing) Desc() *prometheus.Desc {
	labels := []string{
		"Bar",
		"Baz",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBazBing", Help: "HELPME"}
	return prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Baz,
		m.Bing,
	).Desc()
}


// Inc calls the prometheus Inc function using Baz for tags
func (m Baz) Inc() {
	labels := []string{
		"Baz",
	}
	opts := prometheus.CounterOpts{Name: "Baz", Help: "Baz HELP"}
	prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Baz,
	).Inc()
}



// Desc returns the prometheus Counter Desc
func (m Baz) Desc() *prometheus.Desc {
	labels := []string{
		"Baz",
	}
	opts := prometheus.CounterOpts{Name: "Baz", Help: "Baz HELP"}
	return prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Baz,
	).Desc()
}


// Inc calls the prometheus Inc function using BazBar for tags
func (m BazBar) Inc() {
	labels := []string{
		"Baz",
		"Bar",
	}
	opts := prometheus.CounterOpts{Name: "BazBar", Help: "BazBar HELP"}
	prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Baz,
		m.Bar,
	).Inc()
}



// Desc returns the prometheus Counter Desc
func (m BazBar) Desc() *prometheus.Desc {
	labels := []string{
		"Baz",
		"Bar",
	}
	opts := prometheus.CounterOpts{Name: "BazBar", Help: "BazBar HELP"}
	return prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Baz,
		m.Bar,
	).Desc()
}


// Inc calls the prometheus Inc function using BarBing for tags
func (m BarBing) Inc() {
	labels := []string{
		"Bar",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBing", Help: "BarBing HELP"}
	prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Bing,
	).Inc()
}



// Desc returns the prometheus Counter Desc
func (m BarBing) Desc() *prometheus.Desc {
	labels := []string{
		"Bar",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBing", Help: "BarBing HELP"}
	return prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Bing,
	).Desc()
}

