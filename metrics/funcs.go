// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2018-06-16 19:14:36.477837221 -0400 EDT m=&#43;0.002638534
package metrics

import "github.com/prometheus/client_golang/prometheus"

type BarBazBingCounter struct {
	BarBazBing *BarBazBing
	c prometheus.Counter
}
// NewBarBazBingCounter returns an instance of a BarBazBingCounter and registers the counter with prometheus
func NewBarBazBingCounter(m *BarBazBing) BarBazBingCounter {
	labels := []string{
		"Bar",
		"Baz",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBazBing", Help: "HELPME"}
	counter := prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Baz,
		m.Bing,
	)
	prometheus.MustRegister(counter)
	return BarBazBingCounter{
		BarBazBing: m,
		c: counter,
	}
}
// Inc is a wrapper around the prometheus Inc() method
func (c BarBazBingCounter) Inc() {
	c.c.Inc()
}



type BazGauge struct {
	Baz *Baz
	g prometheus.Gauge
}

// NewBazGauge returns an instance of a BazGauge and registers the gauge with prometheus
func NewBazGauge(m *Baz) BazGauge {
	labels := []string{
		"Baz",
	}
	opts := prometheus.GaugeOpts{Name: "Baz", Help: "Baz HELP"}
	guage := prometheus.NewGaugeVec(opts, labels).WithLabelValues(
		m.Baz,
	)
	prometheus.MustRegister(guage)
	return BazGauge{
		Baz: m,
		g: guage,
	}
}

// Set is a wrapper around the prometheus Set(float64) method
func (g BazGauge) Set(s float64) {
	g.g.Set(s)
}


type BazBarCounter struct {
	BazBar *BazBar
	c prometheus.Counter
}
// NewBazBarCounter returns an instance of a BazBarCounter and registers the counter with prometheus
func NewBazBarCounter(m *BazBar) BazBarCounter {
	labels := []string{
		"Baz",
		"Bar",
	}
	opts := prometheus.CounterOpts{Name: "BazBar", Help: "BazBar HELP"}
	counter := prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Baz,
		m.Bar,
	)
	prometheus.MustRegister(counter)
	return BazBarCounter{
		BazBar: m,
		c: counter,
	}
}
// Inc is a wrapper around the prometheus Inc() method
func (c BazBarCounter) Inc() {
	c.c.Inc()
}



type BarBingCounter struct {
	BarBing *BarBing
	c prometheus.Counter
}
// NewBarBingCounter returns an instance of a BarBingCounter and registers the counter with prometheus
func NewBarBingCounter(m *BarBing) BarBingCounter {
	labels := []string{
		"Bar",
		"Bing",
	}
	opts := prometheus.CounterOpts{Name: "BarBing", Help: "BarBing HELP"}
	counter := prometheus.NewCounterVec(opts, labels).WithLabelValues(
		m.Bar,
		m.Bing,
	)
	prometheus.MustRegister(counter)
	return BarBingCounter{
		BarBing: m,
		c: counter,
	}
}
// Inc is a wrapper around the prometheus Inc() method
func (c BarBingCounter) Inc() {
	c.c.Inc()
}


